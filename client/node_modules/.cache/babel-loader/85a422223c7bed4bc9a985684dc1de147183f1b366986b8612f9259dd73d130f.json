{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// function CandidateList() {\n//   const [candidates, setCandidates] = useState([]);\n//   const [filteredCandidates, setFilteredCandidates] = useState([]);\n//   const [languages, setLanguages] = useState([]);\n//   const [languageFilter, setLanguageFilter] = useState(\"\");\n//   const [experienceFilter, setExperienceFilter] = useState(\"\");\n\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:7000/candidates\")\n//       .then((response) => {\n//         setCandidates(response.data.candidates);\n//         setLanguages(response.data.languages);\n//       })\n//       .catch((error) => {\n//         console.error(error);\n//       });\n//   }, []);\n\n//   useEffect(() => {\n//     // Filter candidates by language and experience level\n//     let filtered = candidates.filter((candidate) => {\n//       let languageMatches = false;\n//       let experienceMatches = false;\n\n//       if (languageFilter) {\n//         languageMatches = candidate.languages.some(\n//           (language) => language == languageFilter\n//         );\n//       } else {\n//         languageMatches = true;\n//       }\n\n//       if (experienceFilter === \"junior\") {\n//         experienceMatches =\n//           !candidate.beginYear ||\n//           new Date().getFullYear() - candidate.beginYear < 3;\n//       } else if (experienceFilter === \"senior\") {\n//         experienceMatches =\n//           candidate.beginYear &&\n//           new Date().getFullYear() - candidate.beginYear >= 3;\n//       } else {\n//         experienceMatches = true;\n//       }\n\n//       return languageMatches && experienceMatches;\n//     });\n\n//     // Sort candidates by last update date in descending order\n//     filtered.sort(\n//       (a, b) => new Date(b.lastUpdateDate) - new Date(a.lastUpdateDate)\n//     );\n\n//     setFilteredCandidates(filtered);\n//   }, [candidates, languageFilter, experienceFilter]);\n\n//   return (\n//     <div>\n//       <h1>Candidates</h1>\n//       <div>\n//         <label>\n//           Language:\n//           <select\n//             value={languageFilter}\n//             onChange={(e) => {\n//               setLanguageFilter(e.target.value);\n//             }}\n//           >\n//             <option value=\"\">All</option>\n//             {languages.map((language) => (\n//               <option key={language.id} value={language.id}>\n//                 {language.name}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//         <label>\n//           Experience:\n//           <select\n//             value={experienceFilter}\n//             onChange={(e) => setExperienceFilter(e.target.value)}\n//           >\n//             <option value=\"\">All</option>\n//             <option value=\"junior\">Junior</option>\n//             <option value=\"senior\">Senior</option>\n//           </select>\n//         </label>\n//       </div>\n//       <ul>\n//         {filteredCandidates.map((candidate) => (\n//           <li key={candidate.id}>{candidate.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default CandidateList;","map":{"version":3,"names":[],"sources":["C:/Users/User/Documents/Full stack home test/client/src/components/CandidateList.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// function CandidateList() {\r\n//   const [candidates, setCandidates] = useState([]);\r\n//   const [filteredCandidates, setFilteredCandidates] = useState([]);\r\n//   const [languages, setLanguages] = useState([]);\r\n//   const [languageFilter, setLanguageFilter] = useState(\"\");\r\n//   const [experienceFilter, setExperienceFilter] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(\"http://localhost:7000/candidates\")\r\n//       .then((response) => {\r\n//         setCandidates(response.data.candidates);\r\n//         setLanguages(response.data.languages);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(error);\r\n//       });\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     // Filter candidates by language and experience level\r\n//     let filtered = candidates.filter((candidate) => {\r\n//       let languageMatches = false;\r\n//       let experienceMatches = false;\r\n\r\n//       if (languageFilter) {\r\n//         languageMatches = candidate.languages.some(\r\n//           (language) => language == languageFilter\r\n//         );\r\n//       } else {\r\n//         languageMatches = true;\r\n//       }\r\n\r\n//       if (experienceFilter === \"junior\") {\r\n//         experienceMatches =\r\n//           !candidate.beginYear ||\r\n//           new Date().getFullYear() - candidate.beginYear < 3;\r\n//       } else if (experienceFilter === \"senior\") {\r\n//         experienceMatches =\r\n//           candidate.beginYear &&\r\n//           new Date().getFullYear() - candidate.beginYear >= 3;\r\n//       } else {\r\n//         experienceMatches = true;\r\n//       }\r\n\r\n//       return languageMatches && experienceMatches;\r\n//     });\r\n\r\n//     // Sort candidates by last update date in descending order\r\n//     filtered.sort(\r\n//       (a, b) => new Date(b.lastUpdateDate) - new Date(a.lastUpdateDate)\r\n//     );\r\n\r\n//     setFilteredCandidates(filtered);\r\n//   }, [candidates, languageFilter, experienceFilter]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Candidates</h1>\r\n//       <div>\r\n//         <label>\r\n//           Language:\r\n//           <select\r\n//             value={languageFilter}\r\n//             onChange={(e) => {\r\n//               setLanguageFilter(e.target.value);\r\n//             }}\r\n//           >\r\n//             <option value=\"\">All</option>\r\n//             {languages.map((language) => (\r\n//               <option key={language.id} value={language.id}>\r\n//                 {language.name}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//         </label>\r\n//         <label>\r\n//           Experience:\r\n//           <select\r\n//             value={experienceFilter}\r\n//             onChange={(e) => setExperienceFilter(e.target.value)}\r\n//           >\r\n//             <option value=\"\">All</option>\r\n//             <option value=\"junior\">Junior</option>\r\n//             <option value=\"senior\">Senior</option>\r\n//           </select>\r\n//         </label>\r\n//       </div>\r\n//       <ul>\r\n//         {filteredCandidates.map((candidate) => (\r\n//           <li key={candidate.id}>{candidate.name}</li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CandidateList;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}